%%
%name Tiger

%term EOF
    | ID of string
    | INT of int
    | STRING of string
    | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
    | LBRACE | RBRACE | DOT
    | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
    | AND | OR | ASSIGN
    | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
    | BREAK | NIL
    | FUNCTION | VAR | TYPE
    | UMINUS

%nonterm program         of Absyn.exp
       | var             of Absyn.var
       | exp             of Absyn.exp
       | callexp         of Absyn.exp
       | callexplist     of Absyn.exp list
       | recordexp       of Absyn.exp
       | recordexplist   of (Absyn.symbol * Absyn.exp * pos) list
       | recordexpfields of (Absyn.symbol * Absyn.exp * pos)
       | seqexp          of Absyn.exp
       | seqexplist      of (Absyn.exp * pos) list
       | assignexp       of Absyn.exp
       | ifthenelseexp   of Absyn.exp
       | ifthenexp       of Absyn.exp
       | whileexp        of Absyn.exp
       | forexp          of Absyn.exp
       | arrayexp        of Absyn.exp
       | letexp          of Absyn.exp
       | dec             of Absyn.dec
       | declist         of Absyn.dec list
       | fundec          of Absyn.fundec
       | fundeclist      of Absyn.fundec list
       | vardec          of Absyn.dec
       | typedec         of {name: Absyn.symbol, ty: Absyn.ty, pos: pos}
       | typedeclist     of {name: Absyn.symbol, ty: Absyn.ty, pos: pos} list
       | ty              of Absyn.ty
       | tyfield         of Absyn.field
       | tyfieldlist     of Absyn.field list







%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
         DO OF NIL

%nonassoc FUNCTION VAR TYPE IN
%nonassoc ID
%nonassoc THEN DO
%nonassoc ELSE OF
%left ASSIGN LBRACK
%left OR AND
%nonassoc EQ NEQ LE LT GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program : exp (exp)

var: ID                    (Absyn.SimpleVar(Symbol.symbol(ID), IDleft))
   | var DOT ID            (Absyn.FieldVar(var, Symbol.symbol(ID), varleft))
   | var LBRACK exp RBRACK (Absyn.SubscriptVar(var, exp, varleft))

exp: var                    (Absyn.VarExp(var))
   | NIL                    (Absyn.NilExp)
   | INT                    (Absyn.IntExp(INT))
   | MINUS exp %prec UMINUS (Absyn.NegExp(exp, MINUSleft))
   | STRING                 (Absyn.StringExp(STRING, STRINGleft))
   | callexp                (callexp)
   | exp PLUS exp           (Absyn.OpExp { left=exp1, oper=Absyn.PlusOp, right=exp2, pos=exp1left })
   | exp MINUS exp          (Absyn.OpExp { left=exp1, oper=Absyn.MinusOp, right=exp2, pos=exp1left })
   | exp TIMES exp          (Absyn.OpExp { left=exp1, oper=Absyn.TimesOp, right=exp2, pos=exp1left })
   | exp DIVIDE exp         (Absyn.OpExp { left=exp1, oper=Absyn.DivideOp, right=exp2, pos=exp1left })
   | exp AND exp            (Absyn.OpExp { left=exp1, oper=Absyn.AndOp, right=exp2, pos=exp1left })
   | exp OR exp             (Absyn.OpExp { left=exp1, oper=Absyn.OrOp, right=exp2, pos=exp1left })
   | exp EQ exp             (Absyn.OpExp { left=exp1, oper=Absyn.EqOp, right=exp2, pos=exp1left })
   | exp NEQ exp            (Absyn.OpExp { left=exp1, oper=Absyn.NeqOp, right=exp2, pos=exp1left })
   | exp LT exp             (Absyn.OpExp { left=exp1, oper=Absyn.LtOp, right=exp2, pos=exp1left })
   | exp LE exp             (Absyn.OpExp { left=exp1, oper=Absyn.LeOp, right=exp2, pos=exp1left })
   | exp GT exp             (Absyn.OpExp { left=exp1, oper=Absyn.GtOp, right=exp2, pos=exp1left })
   | exp GE exp             (Absyn.OpExp { left=exp1, oper=Absyn.GeOp, right=exp2, pos=exp1left })
   | recordexp              (recordexp)
   | seqexp                 (seqexp)
   | assignexp              (assignexp)
   | ifthenelseexp          (ifthenelseexp)
   | ifthenexp              (ifthenexp)
   | whileexp               (whileexp)
   | forexp                 (forexp)
   | BREAK                  (Absyn.BreakExp(BREAKleft))
   | arrayexp               (arrayexp)
   | letexp                 (letexp)


callexp: ID LPAREN callexplist RPAREN    (Absyn.CallExp { func=Symbol.symbol(ID),
                                                          args=List.rev(callexplist),
                                                          pos=IDleft })

callexplist: callexplist COMMA exp    (exp :: callexplist)
           | exp                      ([exp])
           |                          ([])


recordexp: ID LBRACE recordexplist RBRACE    (Absyn.RecordExp { fields=List.rev(recordexplist),
                                                                typ=Symbol.symbol(ID),
                                                                pos=IDleft })

recordexplist: recordexplist COMMA recordexpfields    (recordexpfields :: recordexplist)
             | recordexpfields                        ([recordexpfields])

recordexpfields: ID EQ exp    ((Symbol.symbol(ID), exp, IDleft))


seqexp: LPAREN seqexplist RPAREN    (Absyn.SeqExp(List.rev(seqexplist)))

seqexplist: seqexplist SEMICOLON exp    ((exp, expleft) :: seqexplist)
          | exp                         ([(exp, expleft)])
          |                             ([])


assignexp: var ASSIGN exp    (Absyn.AssignExp { var=var,
                                                exp=exp,
                                                pos=varleft })


ifthenelseexp: IF exp THEN exp ELSE exp    (Absyn.IfExp { test=exp1,
                                                          then'=exp2,
                                                          else'=Option.SOME(exp3),
                                                          pos=IFleft })


ifthenexp: IF exp THEN exp    (Absyn.IfExp { test=exp1,
                                             then'=exp2,
                                             else'=Option.NONE,
                                             pos=IFleft })


whileexp: WHILE exp DO exp    (Absyn.WhileExp { test=exp1,
                                                body=exp2,
                                                pos=WHILEleft })


forexp: FOR ID ASSIGN exp TO exp DO exp    (Absyn.ForExp { var=Symbol.symbol(ID),
                                                           escape=ref true,
                                                           lo=exp1,
                                                           hi=exp2,
                                                           body=exp3,
                                                           pos=FORleft })


arrayexp: ID LBRACK exp RBRACK OF exp (Absyn.ArrayExp { typ=Symbol.symbol(ID),
                                                        size=exp1,
                                                        init=exp2,
                                                        pos=IDleft })


letexp: LET declist IN exp END (Absyn.LetExp { decs=List.rev declist,
                                               body=exp,
                                               pos=LETleft })


dec: fundeclist     (Absyn.FunctionDec(fundeclist))
   | vardec         (vardec)
   | typedeclist    (Absyn.TypeDec(typedeclist))

declist: declist dec    (dec :: declist)
       | dec            ([dec])


fundec: FUNCTION ID LPAREN tyfieldlist RPAREN EQ exp             ({ name=Symbol.symbol(ID),
                                                                    params=tyfieldlist,
                                                                    result=Option.NONE,
                                                                    body=exp,
                                                                    pos=FUNCTIONleft })
      | FUNCTION ID LPAREN tyfieldlist RPAREN COLON ID EQ exp    ({ name=Symbol.symbol(ID1),
                                                                    params=tyfieldlist,
                                                                    result=Option.SOME(Symbol.symbol(ID2), ID2left),
                                                                    body=exp,
                                                                    pos=FUNCTIONleft })

fundeclist: fundeclist fundec    (fundec :: fundeclist)
          | fundec               ([fundec])


vardec: VAR ID ASSIGN exp            (Absyn.VarDec { name=Symbol.symbol(ID),
                                                     escape=ref true,
                                                     typ=Option.NONE,
                                                     init=exp,
                                                     pos=VARleft })
     | VAR ID COLON ID ASSIGN exp    (Absyn.VarDec { name=Symbol.symbol(ID1),
                                                     escape=ref true,
                                                     typ=Option.SOME(Symbol.symbol(ID2), ID2left),
                                                     init=exp,
                                                     pos=VARleft })


typedec: TYPE ID EQ ty    ({ name=Symbol.symbol(ID),
                             ty=ty,
                             pos=TYPEleft })

typedeclist: typedeclist typedec    (typedec :: typedeclist)
           | typedec                ([typedec])


ty: ID                           (Absyn.NameTy (Symbol.symbol(ID), IDleft))
  | LBRACE tyfieldlist RBRACE    (Absyn.RecordTy tyfieldlist)
  | ARRAY OF ID                  (Absyn.ArrayTy (Symbol.symbol(ID), ARRAYleft))


tyfield: ID COLON ID    ({ name=Symbol.symbol(ID1),
                           escape=ref true,
                           typ=Symbol.symbol(ID2),
                           pos=ID1left })

tyfieldlist: tyfieldlist COMMA tyfield    (tyfield :: tyfieldlist)
           | tyfield                      ([tyfield])
