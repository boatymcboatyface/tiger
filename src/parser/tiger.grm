%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm  exp | program | seqexp | seqexplist | negation | callexp | callexplist | infixexp | op | arraycreateexp | recordcreateexp | recordcreatelist | recordcreatelistexp | recordassignment | assignmentexp | lvalue

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar.
 *)

program :  exp   ()


exp:    NIL ()
    | INT ()
    | STRING ()
    | seqexp ()
    | negation ()
    | callexp ()
    | infixexp ()
    | arraycreateexp ()
    | recordcreateexp ()
    | assignmentexp ()

seqexp: LPAREN seqexplist RPAREN ()

seqexplist: seqexplist SEMICOLON exp ()
    | exp ()

negation: MINUS exp ()

callexp: ID LPAREN callexplist RPAREN ()

callexplist: callexplist COMMA exp ()
    | exp ()

infixexp: exp op exp ()

op: PLUS ()
    | MINUS ()
    | TIMES ()
    | DIVIDE ()
    | AND ()
    | OR ()
    | EQ ()
    | NEQ ()
    | LT ()
    | LE ()
    | GT ()
    | GE ()

arraycreateexp: ID LBRACK exp RBRACK OF exp ()

recordcreateexp: ID LBRACE recordcreatelistexp RBRACE ()

recordcreatelistexp: recordcreatelist ()
    | ()

recordassignment: ID EQ exp ()

recordcreatelist: recordcreatelist COMMA recordassignment ()
    | recordassignment ()

assignmentexp: lvalue ASSIGN exp ()

lvalue: ID ()
    | lvalue DOT ID ()
    | lvalue LBRACK exp RBRACK ()
    | ID LBRACK exp RBRACK ()
