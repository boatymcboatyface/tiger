%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | UMINUS

%nonterm exp of string
       | program of string
       | seqexp of string
       | seqexplist of string
       | negation of string
       | callexp of string
       | callexplist of string
       | arraycreateexp of string
       | recordcreateexp of string
       | recordcreatelist of string
       | recordcreatelistexp of string
       | fieldcreate of string
       | assignmentexp of string
       | lvalue of string
       | ifthenelseexp of string
       | ifthenexp of string
       | whileexp of string
       | forexp of string
       | letexp of string
       | tyfield of string
       | tyfieldlist of string
       | tyfields of string
       | ty of string
       | typedec of string
       | decs of string
       | dec of string
       | vardec of string
       | fundec of string

%nonassoc ID THEN DO
%nonassoc ASSIGN LBRACK ELSE OF
%left OR AND (* Does precedence matter here? *)
%nonassoc EQ NEQ LE LT GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar.
 *)

program : exp (print("\n\n" ^ exp ^ "\n\n"); "")


exp: lvalue          (lvalue)
   | NIL             ("nil")
   | INT             (Int.toString INT)
   | STRING          (STRING)
   | seqexp          (seqexp)
   | negation        (negation)
   | callexp         (callexp)
   | arraycreateexp  (arraycreateexp)
   | recordcreateexp (recordcreateexp)
   | assignmentexp   (assignmentexp)

   | exp PLUS exp   ("(" ^ exp1 ^ "+" ^ exp2 ^ ")")
   | exp MINUS exp  ("(" ^ exp1 ^ "-" ^ exp2 ^ ")")
   | exp TIMES exp  ("(" ^ exp1 ^ "*" ^ exp2 ^ ")")
   | exp DIVIDE exp ("(" ^ exp1 ^ "/" ^ exp2 ^ ")")
   | exp AND exp    ("(" ^ exp1 ^ " and " ^ exp2 ^ ")")
   | exp OR exp     ("(" ^ exp1 ^ " or " ^ exp2 ^ ")")
   | exp EQ exp     ("(" ^ exp1 ^ "=" ^ exp2 ^ ")")
   | exp NEQ exp    ("(" ^ exp1 ^ "<>" ^ exp2 ^ ")")
   | exp LT exp     ("(" ^ exp1 ^ "<" ^ exp2 ^ ")")
   | exp LE exp     ("(" ^ exp1 ^ "<=" ^ exp2 ^ ")")
   | exp GT exp     ("(" ^ exp1 ^ ">" ^ exp2 ^ ")")
   | exp GE exp     ("(" ^ exp1 ^ ">=" ^ exp2 ^ ")")

   | ifthenelseexp (ifthenelseexp)
   | ifthenexp     (ifthenexp)
   | whileexp      (whileexp)
   | forexp        (forexp)
   | BREAK         ("break")
   | letexp        (letexp)

negation: MINUS exp %prec UMINUS ("(-" ^ exp ^ ")")

seqexp: LPAREN seqexplist RPAREN ("(" ^ seqexplist ^ ")")

seqexplist: seqexplist SEMICOLON exp (seqexplist ^ "; " ^ exp)
    | exp                            (exp)

callexp: ID LPAREN callexplist RPAREN ("")
       | ID LPAREN RPAREN ("")

callexplist: callexplist COMMA exp ("")
    | exp ("")

arraycreateexp: ID LBRACK exp RBRACK OF exp (ID ^ "[" ^ exp1 ^ "] of " ^ exp2)

recordcreateexp: ID LBRACE recordcreatelistexp RBRACE ("")

recordcreatelistexp: recordcreatelist ("")
    | ("")

fieldcreate: ID EQ exp ("")

recordcreatelist: recordcreatelist COMMA fieldcreate ("")
    | fieldcreate ("")

assignmentexp: lvalue ASSIGN exp ("")

lvalue: ID                     (ID)
    | lvalue DOT ID            (lvalue ^ "." ^ ID)
    | lvalue LBRACK exp RBRACK (lvalue ^ "[" ^ exp ^ "]")
    | ID LBRACK exp RBRACK     (ID ^ "[" ^ exp ^ "]")

ifthenelseexp: IF exp THEN exp ELSE exp ("(if " ^ exp1 ^ " then " ^ exp2 ^ " else " ^ exp3 ^ ")")

ifthenexp: IF exp THEN exp ("(if " ^ exp1 ^ " then " ^ exp2 ^ ")")

whileexp: WHILE exp DO exp ("")

forexp: FOR ID ASSIGN exp TO exp DO exp ("")

letexp: LET decs IN seqexplist END ("let *dec* in " ^ seqexplist ^ "end")

decs: dec ("")
    | decs dec ("")

dec: typedec ("")
    | vardec ("")
    | fundec ("")


typedec: TYPE ID EQ ty ("")

ty: ID ("")
    | LBRACE tyfields RBRACE ("")
    | ARRAY OF ID ("")

tyfields: tyfieldlist ("")
    | ("")

tyfieldlist: tyfield ("")
    | tyfieldlist COMMA tyfield ("")

tyfield: ID COLON ID ("")

vardec: VAR ID ASSIGN exp ("")
    | VAR ID COLON ID ASSIGN exp ("")

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp ("")
    | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ("")
